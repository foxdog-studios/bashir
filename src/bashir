#!/usr/bin/env python2

# Copyright 2013 Foxdog Studios Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

'''
Executes a bash script from the directory its stored in.

Use this program by replacing ``#!/bin/bash`` hashbangs in Bash
scripts with ``#!/usr/bin/bashir``. For example,

.. code-block:: shell

    #!/usr/bin/bashir

    echo My working directory is `pwd`

'''

import os
import subprocess
import sys

BASH_PATH = '/bin/bash'

def main(argv=None):
    '''
    Execute a bash script from the directory its stored in.

    :param argv: Optional. A list of command-line arguments for bash.
                 The first is assumed to be a path to a script. The
                 working directory of Bash is set using this path. The
                 rest of the arguments are passed to the script. If
                 ``argv`` is ``None``, ``sys.argv`` is used.
    '''

    if argv is None:
        argv = sys.argv[:]

    bash_args = [BASH_PATH]

    if len(sys.argv) >= 2:
        # Script passed. Find the path of directory its stored in and
        # execute it from there.
        script_path = os.path.realpath(argv[1])
        cwd, script_name = os.path.split(script_path)
        bash_args.append(script_name)
        bash_args.extend(argv[2:])
    else:
        # No script. Just run Bash from current working directory.
        cwd = None

    bash = subprocess.Popen(bash_args, cwd=cwd)

    # PyLint erroneously reports "Instance of 'Popen' has no 'wait'
    # member."
    # pylint: disable=E1101
    return_code = bash.wait()
    # pylint: enable=E1101

    return return_code


if __name__ == '__main__':
    try:
        exit(main())
    except KeyboardInterrupt:
        pass

